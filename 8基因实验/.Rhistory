}
ChangeNumeric<-function(tempz,dls){
tempz<-data.frame(tempz)
t <- data.frame(matrix(as.numeric(unlist(tempz)),ncol = length(tempz[1,])))
rownames(t) <- rownames(tempz)
colnames(t) <- colnames(tempz)
tempz <- t
#统计输出(涉及统计画图)...
write.csv(tempz,'D:\\RST\\SampleAfterNumeric.csv',row.names = F)
tempz<-data.frame(tempz)
#注意保留原来的列名（即基因名称）
tempName <- discretize(tempz,method = MethodName,breaks=dls) #离散化
rownames(tempName) <- rownames(tempz)
colnames(tempName) <- colnames(tempz)
tempz <- tempName
write.csv(tempz,'D:\\RST\\SampleAfterLisan.csv',row.names = F)
tempz<-as.matrix(tempz)
for(p in 1:length(tempz[1,])){#列数
#print(paste('row:',p,' complete'))
splitt<-data.frame(unique(tempz[,p]))
tp<-as.matrix(splitt)
ch<-ExchangeSplit(tp)#置换数据标准
for(k in 1:length(tempz[,1])){#行数
for(kp in 1:length(tp[,1])){
if(tempz[,p][k]==tp[,1][kp]){
tempz[,p][k]=ch[kp]
}else{}
}
}
}
return(tempz)
}
##############################################################################
if(LSdim!=0){
print('正在离散...')
z<-data.frame(ChangeNumeric(z,LSdim)) #二值离散，是or否
write.csv(z,'D:\\RST\\SampleAfterChangeNB.csv',row.names = F)
print('离散完成')
}
print('互信息计算中...')
##############################################################################
return (1)
}
ThreePhrasesDependencyAlgorithm( dim_i ,0.01,0.01,0.01,'interval','D:\\RST\\Gene100_1.csv')
colnames(TPDA_OutputInfomation)<-c('三阶段的【阈值】',
'离散数据【方法】',
'本次的【离散度】',
'此次的源【文件】',
'流程是否涉及排序',
'本次全部的关系数',
'本次程序运行时间',
'含五表型的关系数',
'其中含特定基因数',
'无关基因的比重为',
'三阶段执行时间为',
'【特定基因】比重',
'满足的【关系】为')
write.csv(TPDA_OutputInfomation,"D:\\RST\\总体数据zzzzzzzzzzzzzzz.csv",row.names = F)
###################################################
#                                                 #
#                                                 #
#                   NO.44444444                   #
#                                                 #
#                                                 #
################################################### 如果不进行排序，那么直接运行本文件
library(igraph)
library(bnlearn)
library(Rgraphviz)
CntTdpa<-0
TPDA_OutputInfomation<-data.frame()
ThreePhrasesDependencyAlgorithm<-function(dim,wt1,wt2,wt3,methodd,sourcee){
####################################################################################
Sort1_Or_NotSort2 <- FALSE    #是否运行了关联规则算法排序
LSdim <- dim        #离散值 { 使 LSdim<-0 为 不离散 }
weight_1 <- wt1     #互信息阀值
weight_2 <- wt2     #互信息阀值
weight_3 <- wt3     #互信息阀值
MethodName <- methodd
NotSort_File <- sourcee                     #不排序的·输入
Sort_File <- 'D:\\RST\\rules\\express100_after.csv'       #排序后的·输入
####################################################################################
#预处理 100 + 4 + 5
####################################################################################################################
Vitamin9<-read.csv("D:\\RST\\weishengsu_add_5_and_4.csv",header = F,stringsAsFactors = FALSE)[-1,]
if(Sort1_Or_NotSort2==TRUE){
Data100<-read.csv( Sort_File ,header = F,stringsAsFactors = FALSE)[-1,]
#排序的话·每次抽样的结果为express100_after.csv
}else{
Data100<-read.csv( NotSort_File ,header = F,stringsAsFactors = FALSE)[-1,]
#不排序的话·每次抽样的结果为Gene100.csv
}
SampleA<-rbind(Vitamin9,Data100) #100+9
write.csv(SampleA,"D:\\RST\\Sample11.csv",row.names = F)
####################################################################################################################
#正式开始
z<-read.csv("D:\\RST\\Sample11.csv",header = F,stringsAsFactors = FALSE)[-1,]
row.names(z)<-z[,1]
z<-z[-1]
#将源数据z离散
#并按区间置换其结果
#即：n值离散后，z的每一列变为n种区间，将n种区间按大小置换为整数1到n
#Ex：[2:4],[0:2],[4:9].共3个区间（无序），应对应将[0:2]换为1，[2:4]换为2，[7:9]换为3
####################################################################################
ExchangeSplit<-function(complexx){
countPt<-length(complexx)#离散数
sttr<-complexx[,1]
r<-data.frame()
for(index in 1:countPt){
ta<-strsplit(sttr[index],split=",")
ta<-unlist(ta)
r[index,1]<-as.numeric(chartr(old = '(',new=' ',chartr(old='[',new = ' ',ta[1])))
r[index,2]<-as.numeric(chartr(old = ')',new=' ',chartr(old=']',new = ' ',ta[2])))
r[index,3]<-0.5*(r[index,1]+r[index,2]) #用区间 中值 做比较量
r[index,4]<-0
#将区间端点映射为数值
}
for(ValueChge in 1:length(r[,1])){
minn<-255 #假设最小值
for(pp in 1:length(r[,1])){
if(r[pp,4]==0&&r[pp,3]<minn){
minn<-r[pp,3]
}
}
if(minn!=255){
for(kk in 1:length(r[,1])){
if(r[kk,3]==minn)r[kk,4]=ValueChge
}
}else{}
}
return (r[,4])#返回第四列value列
}
ChangeNumeric<-function(tempz,dls){
tempz<-data.frame(tempz)
t <- data.frame(matrix(as.numeric(unlist(tempz)),ncol = length(tempz[1,])))
rownames(t) <- rownames(tempz)
colnames(t) <- colnames(tempz)
tempz <- t
#统计输出(涉及统计画图)...
write.csv(tempz,'D:\\RST\\SampleAfterNumeric.csv',row.names = F)
tempz<-data.frame(tempz)
#注意保留原来的列名（即基因名称）
tempName <- discretize(tempz,method = MethodName,breaks=dls) #离散化
rownames(tempName) <- rownames(tempz)
colnames(tempName) <- colnames(tempz)
tempz <- tempName
write.csv(tempz,'D:\\RST\\SampleAfterLisan.csv',row.names = F)
tempz<-as.matrix(tempz)
for(p in 1:length(tempz[1,])){#列数
#print(paste('row:',p,' complete'))
splitt<-data.frame(unique(tempz[,p]))
tp<-as.matrix(splitt)
ch<-ExchangeSplit(tp)#置换数据标准
for(k in 1:length(tempz[,1])){#行数
for(kp in 1:length(tp[,1])){
if(tempz[,p][k]==tp[,1][kp]){
tempz[,p][k]=ch[kp]
}else{}
}
}
}
return(tempz)
}
##############################################################################
if(LSdim!=0){
print('正在离散...')
z<-data.frame(ChangeNumeric(z,LSdim)) #二值离散，是or否
write.csv(z,'D:\\RST\\SampleAfterChangeNB.csv',row.names = F)
print('离散完成')
}
print('互信息计算中...')
##############################################################################
return (1)
}
ThreePhrasesDependencyAlgorithm( 3 ,0.01,0.01,0.01,'interval','D:\\RST\\Gene100_1.csv')
NineAlgorithmTest<-function(alg,methodd,lsd,sourcee){
library(igraph)
library(bnlearn)
library(Rgraphviz)
alg<-'gs'
methodd<-'quantile'
#lsd<-2
sourcee<-'D:\\RST\\Gene100_4.csv'
####################################################################################
Sort1_Or_NotSort2 <- FALSE    #是否运行了关联规则算法排序
LSdim <-lsd       #离散值 { 使 LSdim<-0 为 不离散 }
NotSort_File <-sourcee                     #不排序的·输入
Sort_File <- 'D:\\RST\\rules\\express100_after.csv'       #排序后的·输入
####################################################################################
#预处理 100 + 4 + 5
####################################################################################################################
Vitamin9<-read.csv("D:\\RST\\weishengsu_add_5_and_4.csv",header = F,stringsAsFactors = FALSE)[-1,]
if(Sort1_Or_NotSort2==TRUE){
Data100<-read.csv( Sort_File ,header = F,stringsAsFactors = FALSE)[-1,]
#排序的话·每次抽样的结果为express100_after.csv
}else{
Data100<-read.csv( NotSort_File ,header = F,stringsAsFactors = FALSE)[-1,]
#不排序的话·每次抽样的结果为Gene100.csv
}
SampleA<-rbind(Vitamin9,Data100) #100+9
write.csv(SampleA,"D:\\RST\\SampleNine.csv",row.names = F)
####################################################################################################################
#正式开始
mydata<- read.csv("D:\\RST\\SampleNine.csv", header=FALSE)
mydata<-data.frame(mydata)
mydata<-mydata[-1,] #去掉第一行的列名
mydata<-t(mydata)
colnames(mydata)<-mydata[1,]
mydata<-mydata[-1,]
t <- data.frame(matrix(as.numeric(unlist(mydata)),ncol = length(mydata[1,])))
rownames(t) <- rownames(mydata)
colnames(t) <- colnames(mydata)
mydata <- t
mydata<-data.frame(mydata)
mydata <- discretize(mydata,method = methodd,breaks= LSdim ) #离散化
discretize()
#sink("D:\\RST\\任意取名.txt",append=TRUE,split=TRUE)
#与之前的比较方式不同，此处直接对各算法的结果进行比较查找
#找出满足条件的关系的数量，用函数CompareG()完成
TDBX5<-c('LUT','ZEA','Bcry','AC','BC')#特定表型
TDJY4<-c('GRMZM2G012966','GRMZM2G152135','GRMZM2G300348','GRMZM2G108457')#特定基因
CheckInArr<-function(nm,arr){
cnt<-length(arr)
for(ci in 1:cnt){
if(nm[,1]==arr[ci]||nm[,2]==arr[ci]){
return (TRUE)
}
}
return (FALSE)
}
ToArrayStr<-function(df){
sstr<-c()
longstr<-c()
for(ssi in 1:length(df[,1])){
sstr<-c(sstr,paste('[',df[ssi,1],',',df[ssi,2],']',sep=''))
longstr<-paste(longstr,sstr[ssi])
}
return (longstr)
}
CompareG <- function(resultw,AgrName,TimeNe){
resultw<-data.frame(resultw)
tempBX<-data.frame()
count<-0
for(k in 1:length(resultw[,1])){
if(CheckInArr(resultw[k,],TDBX5)==TRUE){
count <- count+1
tempBX[count,1]<-resultw[k,1]
tempBX[count,2]<-resultw[k,2]
}
}
print(tempBX)
tempG<-data.frame()
countYes<-0
for(k in 1:length(tempBX[,1])){
if(CheckInArr(tempBX[k,],TDJY4)==TRUE){
countYes <- countYes+1
tempG[countYes,1]<-tempBX[k,1]
tempG[countYes,2]<-tempBX[k,2]
}
}
#如果tempG为空，那么直接打印或者看其长度都会出错
#tempG<-tempG[order(tempG[,1],decreasing=T),] #排个序
#print(tempBX)#含表型BC的关系数(M)
cat(paste('\n本程序段使用算法为\t',AgrName,
'\n抽样中【表型数】为\t Z =',length(TDBX5),
'\n其中含有特定基因数\t Y =',4,
'\n其中不含特定基因数\t X =',100,
'\n本次全部的关系数为\t',length(resultw[,1]),
'\n此阶段【离散度】为\t',LSdim,
'\n含表型BC的关系数有\t M =',length(tempBX[,1]),
'\n其中含有特定基因数\t N =',countYes,
'\n  无关基因的比重为\t p`=',(length(tempBX[,1])-countYes)/100,
'\n【特定基因】比重为\t P =',countYes/4
))
cat('\n- - - - - - - - - - - - - - - - - - - - - \n')
NineInfo<-data.frame(1,2,3,4,5,6,7,8,9,10,11,12,13)
NineInfo[,1]<-AgrName
NineInfo[,6]<-length(resultw[,1])
NineInfo[,7]<-TimeNe
NineInfo[,8]<-length(tempBX[,1])
NineInfo[,9]<-countYes
NineInfo[,10]<-paste('p`=',(length(tempBX[,1])-countYes)/100)
NineInfo[,11]<-paste('P =',countYes/4)
NineInfo[,12]<-Sys.time()
NineInfo[,13]<-ToArrayStr(tempG)
return (NineInfo)
}
OPinfo<-function(mtd,mdata){
dataa<-data.frame()
timestartNine<-Sys.time()
if(mtd=='gs'){
dataa<-gs(mdata)$arcs
}else if(mtd=='hc'){
dataa<-hc(mdata)$arcs
}else if(mtd=='iamb'){
dataa<-iamb(mdata)$arcs
}else if(mtd=='mmpc'){
dataa<-mmpc(mdata)$arcs
}else if(mtd=='rsmax2'){
dataa<-rsmax2(mdata)$arcs
}else if(mtd=='tabu'){
dataa<-tabu(mdata)$arcs
}else if(mtd=='fastiamb'){
dataa<-fast.iamb(mdata)$arcs
}else if(mtd=='interiamb'){
dataa<-inter.iamb(mdata)$arcs
}else if(mtd=='mmhc'){
dataa<-mmhc(mdata)$arcs
}
gs_2 <- gs(mydata)
timeendNine<-Sys.time()
timeNine<-c(timeendNine-timestartNine)#timeNine
return(CompareG(dataa,mtd,timeNine))
}
outputN<-data.frame(1,2,3,4,5,6,7,8,9,10,11,12,13)
outputN<-OPinfo(alg,mydata)
outputN[,2]<-methodd
outputN[,3]<-LSdim
outputN[,4]<-sourcee
outputN[,5]<-as.character(Sort1_Or_NotSort2)
}
NineAlgorithmTest('gs','quantile',4,'D:\\RST\\Gene100_4.csv')
alg<-'gs'
methodd<-'quantile'
lsd<-2
sourcee<-'D:\\RST\\Gene100_4.csv'
####################################################################################
Sort1_Or_NotSort2 <- FALSE    #是否运行了关联规则算法排序
LSdim <-lsd       #离散值 { 使 LSdim<-0 为 不离散 }
NotSort_File <-sourcee                     #不排序的·输入
Sort_File <- 'D:\\RST\\rules\\express100_after.csv'       #排序后的·输入
####################################################################################
#预处理 100 + 4 + 5
####################################################################################################################
Vitamin9<-read.csv("D:\\RST\\weishengsu_add_5_and_4.csv",header = F,stringsAsFactors = FALSE)[-1,]
if(Sort1_Or_NotSort2==TRUE){
Data100<-read.csv( Sort_File ,header = F,stringsAsFactors = FALSE)[-1,]
#排序的话·每次抽样的结果为express100_after.csv
}else{
Data100<-read.csv( NotSort_File ,header = F,stringsAsFactors = FALSE)[-1,]
#不排序的话·每次抽样的结果为Gene100.csv
}
SampleA<-rbind(Vitamin9,Data100) #100+9
write.csv(SampleA,"D:\\RST\\SampleNine.csv",row.names = F)
####################################################################################################################
#正式开始
#NineAlgorithmTest<-function(alg,methodd,lsd,sourcee){
library(igraph)
library(bnlearn)
library(Rgraphviz)
mydata<- read.csv("D:\\RST\\SampleNine.csv", header=FALSE)[-1,]
row.names(mydata)<-mydata[,1]
mydata<-mydata[-1]
z<-read.csv("D:\\RST\\Sample.csv",header = F,stringsAsFactors = FALSE)[-1,]
row.names(z)<-z[,1]
z<-z[-1]
tempz<-data.frame(z)
t <- data.frame(matrix(as.numeric(unlist(tempz)),ncol = length(tempz[1,])))
rownames(t) <- rownames(tempz)
colnames(t) <- colnames(tempz)
tempz <- t
tempName <- discretize(tempz,method = 'interval',breaks=2) #离散化
rownames(tempName) <- rownames(tempz)
colnames(tempName) <- colnames(tempz)
tempz <- tempName
#mydata1 <- discretize(mydata,method = 'interval',breaks= 2 ) #离散化
#mydata<-data.frame(t(mydata))
dataa<-gs(mydata)$arcs
#sink("D:\\RST\\任意取名.txt",append=TRUE,split=TRUE)
#与之前的比较方式不同，此处直接对各算法的结果进行比较查找
#找出满足条件的关系的数量，用函数CompareG()完成
TDBX5<-c('LUT','ZEA','Bcry','AC','BC')#特定表型
TDJY4<-c('GRMZM2G012966','GRMZM2G152135','GRMZM2G300348','GRMZM2G108457')#特定基因
CheckInArr<-function(nm,arr){
cnt<-length(arr)
for(ci in 1:cnt){
if(nm[,1]==arr[ci]||nm[,2]==arr[ci]){
return (TRUE)
}
}
return (FALSE)
}
OPinfo<-function(mtd,mdata){
dataa<-data.frame()
timestartNine<-Sys.time()
if(mtd=='gs'){
print(1)
dataa<-gs(mdata)$arcs
print(dataa)
print(2)
}else if(mtd=='hc'){
dataa<-hc(mdata)$arcs
}else if(mtd=='iamb'){
dataa<-iamb(mdata)$arcs
}else if(mtd=='mmpc'){
dataa<-mmpc(mdata)$arcs
}else if(mtd=='rsmax2'){
dataa<-rsmax2(mdata)$arcs
}else if(mtd=='tabu'){
dataa<-tabu(mdata)$arcs
}else if(mtd=='fastiamb'){
dataa<-fast.iamb(mdata)$arcs
}else if(mtd=='interiamb'){
dataa<-inter.iamb(mdata)$arcs
}else if(mtd=='mmhc'){
dataa<-mmhc(mdata)$arcs
}
timeendNine<-Sys.time()
timeNine<-c(timeendNine-timestartNine)#timeNine
################################################################################
resultw<-data.frame(dataa)
tempBX<-data.frame()
count<-0
for(k in 1:length(resultw[,1])){
if(CheckInArr(resultw[k,],TDBX5)==TRUE){
count <- count+1
tempBX[count,1]<-resultw[k,1]
tempBX[count,2]<-resultw[k,2]
}
}
print(tempBX)
tempG<-data.frame()
countYes<-0
for(k in 1:length(tempBX[,1])){
if(CheckInArr(tempBX[k,],TDJY4)==TRUE){
countYes <- countYes+1
tempG[countYes,1]<-tempBX[k,1]
tempG[countYes,2]<-tempBX[k,2]
}
}
print(3)
#如果tempG为空，那么直接打印或者看其长度都会出错
#tempG<-tempG[order(tempG[,1],decreasing=T),] #排个序
#print(tempBX)#含表型BC的关系数(M)
cat(paste('\n本程序段使用算法为\t',mtd,
'\n抽样中【表型数】为\t Z =',length(TDBX5),
'\n其中含有特定基因数\t Y =',4,
'\n其中不含特定基因数\t X =',100,
'\n本次全部的关系数为\t',length(resultw[,1]),
'\n此阶段【离散度】为\t',LSdim,
'\n含表型BC的关系数有\t M =',length(tempBX[,1]),
'\n其中含有特定基因数\t N =',countYes,
'\n  无关基因的比重为\t p`=',(length(tempBX[,1])-countYes)/100,
'\n【特定基因】比重为\t P =',countYes/4
))
cat('\n- - - - - - - - - - - - - - - - - - - - - \n')
sstr<-c()
longstr<-c()
for(ssi in 1:length(tempG[,1])){
sstr<-c(sstr,paste('[',tempG[ssi,1],',',tempG[ssi,2],']',sep=''))
longstr<-paste(longstr,sstr[ssi])
}
print(4)
NineInfo<-data.frame(1,2,3,4,5,6,7,8,9,10,11,12,13)
NineInfo[,1]<-mtd
NineInfo[,6]<-length(resultw[,1])
NineInfo[,7]<-timeNine
NineInfo[,8]<-length(tempBX[,1])
NineInfo[,9]<-countYes
NineInfo[,10]<-paste('p`=',(length(tempBX[,1])-countYes)/100)
NineInfo[,11]<-paste('P =',countYes/4)
NineInfo[,12]<-Sys.time()
NineInfo[,13]<-longstr
################################################################################
print(5)
return(NineInfo)
}
OPinfo('gs',mydata)
#}
#NineAlgorithmTest('gs','quantile',4,'D:\\RST\\Gene100_4.csv')
alg<-'gs'
methodd<-'quantile'
lsd<-2
sourcee<-'D:\\RST\\Gene100_4.csv'
####################################################################################
Sort1_Or_NotSort2 <- FALSE    #是否运行了关联规则算法排序
LSdim <-lsd       #离散值 { 使 LSdim<-0 为 不离散 }
NotSort_File <-sourcee                     #不排序的·输入
Sort_File <- 'D:\\RST\\rules\\express100_after.csv'       #排序后的·输入
####################################################################################
#预处理 100 + 4 + 5
####################################################################################################################
Vitamin9<-read.csv("D:\\RST\\weishengsu_add_5_and_4.csv",header = F,stringsAsFactors = FALSE)[-1,]
if(Sort1_Or_NotSort2==TRUE){
Data100<-read.csv( Sort_File ,header = F,stringsAsFactors = FALSE)[-1,]
#排序的话·每次抽样的结果为express100_after.csv
}else{
Data100<-read.csv( NotSort_File ,header = F,stringsAsFactors = FALSE)[-1,]
#不排序的话·每次抽样的结果为Gene100.csv
}
SampleA<-rbind(Vitamin9,Data100) #100+9
write.csv(SampleA,"D:\\RST\\SampleNine.csv",row.names = F)
####################################################################################################################
#正式开始
#NineAlgorithmTest<-function(alg,methodd,lsd,sourcee){
library(igraph)
library(bnlearn)
library(Rgraphviz)
mydata<- read.csv("D:\\RST\\SampleNine.csv", header=FALSE)[-1,]
row.names(mydata)<-mydata[,1]
mydata<-mydata[-1]
z<-read.csv("D:\\RST\\Sample.csv",header = F,stringsAsFactors = FALSE)[-1,]
row.names(z)<-z[,1]
z<-z[-1]
tempz<-data.frame(z)
t <- data.frame(matrix(as.numeric(unlist(tempz)),ncol = length(tempz[1,])))
rownames(t) <- rownames(tempz)
colnames(t) <- colnames(tempz)
tempz <- t
tempName <- discretize(tempz,method = 'interval',breaks=2) #离散化
rownames(tempName) <- rownames(tempz)
colnames(tempName) <- colnames(tempz)
tempz <- tempName
